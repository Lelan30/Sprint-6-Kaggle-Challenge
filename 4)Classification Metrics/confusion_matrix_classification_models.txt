#The confusion matrix is often plotted as a heatmap where columns represent the
#predicted classes and the rows represent the true classes

#The diagnal of the matrix should be equal to the total number of correct predictions 
#for each class
#(plots become less useful the more number of classes you have)
#from sklearn.metrics._plot.confusion_matrix import plot_confusion_matrix
#ConfisuinMatrixDisplay.from_estimator class to build matrix
#Alternatively, ConfusionMatrixDisplay.from_predictions

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import ConfusionMatrixDisplay

#Load the digits data
digits = datasets.load_digits(n_class=10)

#Create the feature matrix
X = digits.data

#Create the target array
y = digits.target

#Split the data into training and test sets
X_train, X_test, y_train, y_test= train_test_split(X, y, random_state=0)

#Instantiate and train a decision tree classifier
dt_classifier = DecisionTreeClassifier().fit(X_train, y_train)


#Plot the confusion matrix
import matplotlib.pyplot as plt

fig, ax = plt.subplots(1, 1, figsize=(8, 8))

plot_confusion_matrix(dt_classifier, X_test, y_test,
                      display_labels= digits.target_names,
                      cmap=plt.cm.Blues, ax=ax)

ax.set_title('Confusion Matrix: Digits decision tree model')

fig.plot()

#Outcome:
#The model performs well. Although the model has troublw with a few numbers.
#the model incorrectly distiguishes between 2 and 3 also 4 and 7
